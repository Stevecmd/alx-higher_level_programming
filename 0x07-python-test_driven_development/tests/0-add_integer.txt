================================
Usage of 0-add_integer.py
================================

# Importing the add_integer function from the 0-add_integer.py module
>>> add_integer = __import__('0-add_integer').add_integer

# Checking if the function is documented
>>> 'add_integer' in dir(__import__('0-add_integer'))
True
>>> __import__('0-add_integer').add_integer.__doc__ is not None
True

# Test case 1: Both integers
>>> add_integer(2, 3)
5

# Test case 2: One integer, one float
>>> add_integer(2, 3.5)
5

# Test case 3: Both floats
>>> add_integer(2.5, 3.5)
5

# Test case 4: Default value for b
>>> add_integer(2)
100

# Test case 5: Large integers
>>> add_integer(1000000, 2000000)
3000000

# Test case 6: Negative integers
>>> add_integer(-5, 10)
5

# Test case 7: Both are floats
>>> add_integer(2.5, 3.8)
5

# Test case 8: One is float and the other is an integer
>>> add_integer(2.5, 3)
5

# Test case 9: Both are negative integers
>>> add_integer(-5, -10)
-15

# Test case 10: Adding 0 to an integer
>>> add_integer(5, 0)
5

# Test case 11: Adding 0 to a float
>>> add_integer(5.5, 0)
5

# Test case 12: Adding two negative floats
>>> add_integer(-5.5, -3.3)
-8

# Test case 13: Adding a large positive float and a large negative float
>>> add_integer(1000000.5, -2000000.3)
-1000000

# Test case 14: Adding a large negative float and a large positive float
>>> add_integer(-1000000.5, 2000000.3)
1000000

# Test case 15: Adding a large positive integer and a large positive float
>>> add_integer(1000000, 2000000.3)
3000000

# Test case 16: Adding a large positive float and a large positive integer
>>> add_integer(1000000.5, 2000000)
3000000

# Test case 17: Check type - Passing a non-integer/non-float value
>>> add_integer('2', 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test case 18: Float overflow - Adding very large floats
>>> add_integer(1e100, 1e100)
20000000000000000318057822195198360936721617127890562779562655115495677544340762121626939971713630208

# Test case 18.2: Check for float overflow
result = add_integer(1e300, 1e300)
if result != float('inf'):
  print("Float overflow not detected. This should be infinity.")

# Test case 19: Cannot convert float NaN to integer - Adding NaN to an integer
>>> add_integer(float('nan'), 5)
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer

# Test case 20: expects that both arguments are either integers or floats
>>> add_integer("hello", 4)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test case 21: expects that both arguments are either integers or floats
>>> add_integer(4, "hello")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

# Test case 21: cannot convert float NaN to integer
>>> add_integer(float('nan'))
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer

# Test case 21: cannot convert float NaN to integer
>>> add_integer(4, float('nan'))
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer
