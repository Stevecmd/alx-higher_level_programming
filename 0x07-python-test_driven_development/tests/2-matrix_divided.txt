================================
Usage of 2-matrix_divided.py
================================

# Importing the matrix_divided function from the 2-matrix_divided.py module
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test case 1: Matrix must be a list of lists of integers or floats
# Each row of the matrix must have the same size
# div must be a number (integer or float), otherwise raise a TypeError exception
>>> matrix_divided("not a matrix", 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, 3], [4, 5], [6, 7, 8]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], "not a number")
Traceback (most recent call last):
    ...
TypeError: div must be a number
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test case 2: Missing one argument
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Test case 3: Missing two arguments
>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

# Test case: matrix= List of Lists of integers / div= integer
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

# Test case: matrix= list of lists of integers / div= float(inf) => all values == 0.0
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
